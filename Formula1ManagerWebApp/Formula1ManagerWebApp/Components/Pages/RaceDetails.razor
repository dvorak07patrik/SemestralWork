<!-- URL routes to implement user parameters -->
@page "/race-details"
@page "/race-details/{getSeason:int}"
@page "/race-details/{getSeason:int}/race-{getRaceId:int}/{getChosen}"
@page "/race-details/{getSeason:int}/race-{getRaceId:int}/{getChosen}/drivers-{getDriverIds}"

@using Formula1ManagerWebApp.Data.Models
@using Formula1ManagerWebApp.Data.DatabaseComm
@using Microsoft.EntityFrameworkCore
@inject DatabaseCommunicationForStandings DatabaseCommunication
@inject NavigationManager Navigation
@inject IJSRuntime JS
@rendermode InteractiveServer

<h1>Race details</h1>

<!-- Grid container for season, race, drivers, and data selection -->
<div class="grid-container">
    <div>
        <!-- Display seasons list -->
        @if (seasons != null)
        {
            <div class="scrollable-list">
                <ul>
                    @foreach (var season in seasons)
                    {
                        if (chosenSeason != season)
                        {
                            <li @onclick="() => OnSeasonClick(season)">@season</li>
                        }
                        else
                        {
                            <li class="chosen" @onclick="() => OnSeasonClick(season)">@season</li>
                        }

                    }
                </ul>
            </div>
        }
        else
        {
            <p>Loading...</p>
        }
    </div>
    <div>
        <!-- Display races list for selected season -->
        @if (racesReady)
        {
            <div class="scrollable-list">
                <ul>
                    @foreach (var race in races)
                    {
                        if (chosenRaceId != race.raceId)
                        {
                            <li @onclick="() => OnRaceClick(race.raceId)">@race.name - @race.date.ToString("MM/dd")</li>
                        }
                        else
                        {
                            <li class="chosen" @onclick="() => OnRaceClick(race.raceId)">@race.name - @race.date.ToString("MM/dd")</li>
                        }

                    }
                </ul>
            </div>
        }
    </div>
    <div>
        <!-- Display drivers list for selected race -->
        @if (drivers != null)
        {
            <div class="scrollable-list">
                <ul>
                    @if (chosenDriversIds == null || !chosenDriversIds.Any())
                    {
                        <li class="chosen">All drivers</li>
                    }
                    else
                    {
                        <li @onclick="() => OnAllDriversClick()">All drivers</li>
                    }
                    @for (int i = 0; i < drivers.Count; i++)
                    {
                        Driver driver = drivers[i];
                        if (chosenDriversIds != null && chosenDriversIds.Contains(drivers[i].driverId))
                        {
                            <li class="chosen" @onclick="() => OnDriverClick(driver.driverId)">@driver.forename @driver.surname</li>
                        }
                        else
                        {
                            <li @onclick="() => OnDriverClick(driver.driverId)">@driver.forename @driver.surname</li>
                        }
                    }
                </ul>
            </div>
        }
    </div>
    <div class="scrollable-list">
        <ul>
            <!-- Display options to choose between results and lap times -->
            @if (chosenData == "results")
            {
                <li class="chosen">Results</li>
            }
            else
            {
                <li @onclick='() => OnDataClick("results")'>Results</li>
            }
            @if (chosenRaceId != null && chosenRaceId != null && chosenDriversIds != null && chosenDriversIds.Any())
            {
                @if (chosenData == "lapTimes")
                {
                    <li class="chosen">Lap Times</li>
                }
                else
                {
                    <li @onclick='() => OnDataClick("lapTimes")'>Lap Times</li>
                }
            }
           
        </ul>
    </div>

</div>


<!-- Display results for selected race -->
@if (resultsForRace != null && resultsForRace.Any() && drivers != null && constructors != null && lapTimesChosen == false)
{

    <h2>Results for @chosenSeason - @chosenRace.name</h2>
    <div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Position</th>
                    <th>Forename</th>
                    <th>Surname</th>
                    <th>Team</th>
                    <th>Points</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in resultsForRace)
                {
                    Driver driver = drivers
                        .First(d => d.driverId == result.driverId);

                    Constructor constructor = constructors
                        .Where(c => c.constructorId == result.constructorId)
                        .First();

                    <tr>
                        <td>@result.position</td>
                        <td>@driver.forename</td>
                        <td>@driver.surname</td>
                        <td>@constructor.name</td>
                        <td>@result.points</td>
                        <td>@result.timeOrRetired</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<!-- Display lap times graph -->
@if (wholeSeasonChosen == true)
{
    <h3>Whole @chosenSeason season results</h3>
    <div style="height: 700px; width: 100%; position: relative;">
        <canvas id="wholeSeasonChart"></canvas>
    </div>
}

@if (lapTimesChosen == true)
{
    <h3>Lap Times Graph</h3>
    <div style="height: 700px; width: 100%; position:relative;">
        <canvas id="lapTimesChart"></canvas>
    </div>
}





@code {
    private List<Driver>? drivers;
    private List<int> seasons;
    private List<Race> races;
    private List<Constructor> constructors;
    private List<Result>? resultsForRace;
    private List<List<Result>>? resultsForRaces;
    private List<List<LapTime>>? lapTimesForDrivers;
    private Race? chosenRace;
    private int chosenSeason;
    private int? chosenRaceId;
    private bool racesReady = false;
    private bool wholeSeasonChosen = false;
    private bool lapTimesChosen = false;
    private List<int>? chosenDriversIds;
    private string chosenData;

    [Parameter]
    public int? getSeason { get; set; }
    [Parameter]
    public int? getRaceId { get; set; }
    [Parameter]
    public string? getDriverIds { get; set; }
    [Parameter]
    public string? getChosen{ get; set; }

    // Initialize component and handle URL parameters
    protected override async Task OnInitializedAsync()
    {
        try
        {
            chosenData = "results";

            seasons = await DatabaseCommunication.GetAllSeasons();
            chosenDriversIds = new List<int>();
            if (getSeason.HasValue)
            {
                await OnSeasonClick(getSeason.Value);
                if (getRaceId.HasValue)
                {
                    chosenRaceId = getRaceId;
                    await OnRaceClick(getRaceId);
                    if (getChosen != null)
                    {
                        chosenData = getChosen;
                        if (getDriverIds != null)
                        {
                            chosenDriversIds = getDriverIds.Split(',').Select(int.Parse).ToList();
                            await UpdateUrl();
                            if (chosenData == "results")
                            {
                                OnWholeSeason();
                            }
                            else
                            {
                                await OnDriversLapTimes();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Handle data click (results or lap times)
    private async void OnDataClick(string dataChosen)
    {
        chosenData = dataChosen;
        StateHasChanged();
        await UpdateUrl();
        if (chosenData == "lapTimes")
        {
            wholeSeasonChosen = false;
            resultsForRace = null;
            await OnDriversLapTimes();
        }
        else
        {
            wholeSeasonChosen = true;
            lapTimesChosen = false;
            await OnRaceClick(chosenRaceId);
            if (resultsForRaces == null || !resultsForRaces.Any())
            {
                OnWholeSeason();
            }
            else
            {
                await LoadWholeSeasonResultsChart();
            }
            
        }

    }

    // Handle click for all drivers
    private async void OnAllDriversClick()
    {
        chosenDriversIds.Clear();
        UpdateUrl();
        OnWholeSeason();
    }

    // Handle season click
    private async Task OnSeasonClick(int season)
    {

        try
        {
            Console.WriteLine($"Season clicked: {season}");
            if (chosenSeason == 0 || chosenSeason != season)
            {
                racesReady = false;
                races = await DatabaseCommunication.GetRacesForSeason(season);

                // Remove races with no results
                await DeleteRacesWithNoResults();

                chosenSeason = season;
                resultsForRace = new List<Result>();
                resultsForRaces = null;
                chosenRaceId = 0;
                var standingsForLastRace = await DatabaseCommunication.GetDriverStandingsForRace(races[races.Count - 1].raceId);
                drivers = await DatabaseCommunication.GetDriversForRace(standingsForLastRace);
                chosenDriversIds = new List<int>();
                wholeSeasonChosen = false;

                StateHasChanged();
                // Update the URL without reloading the page
                await UpdateUrl();
            }

            //Console.WriteLine($"Races count: {races.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    // Handle whole season results
    private async void OnWholeSeason()
    {
        wholeSeasonChosen = true;
        try
        {
            await getResultsForRaces();

            await LoadWholeSeasonResultsChart();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

    }

    // Handle race click
    private async Task OnRaceClick(int? raceId)
    {
        chosenRaceId = raceId;

        try
        {
            Console.WriteLine($"RaceId: {raceId}");

            chosenRace = races
                .Where(r => r.raceId == raceId)
                .First();

            resultsForRace = await DatabaseCommunication.GetResultsForRace(raceId);

            drivers = await DatabaseCommunication.GetDriversForResult(resultsForRace);

            constructors = await DatabaseCommunication.GetConstructorsForRaceFromResults(resultsForRace);

            // Update the URL without reloading the page
            await UpdateUrl();

            StateHasChanged();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Handle driver click
    private async Task OnDriverClick(int driverId)
    {
        if (chosenDriversIds != null && chosenDriversIds.Contains(driverId))
        {
            chosenDriversIds.Remove(driverId);
        }
        else
        {
            chosenDriversIds.Add(driverId);
        }   
        if (chosenData == "results")
        {
            if (resultsForRaces == null || !resultsForRaces.Any()) { OnWholeSeason(); }
            else { await LoadWholeSeasonResultsChart(); }   
        }
        else
        {
            resultsForRace = null;
            lapTimesChosen = false;
            if (chosenDriversIds.Any())
            {
                await OnDriversLapTimes();
            }   
        }
        await UpdateUrl();

    }

    // Handle lap times for selected drivers
    private async Task OnDriversLapTimes()
    {
        lapTimesChosen = true;
        lapTimesForDrivers = new List<List<LapTime>>();
        foreach (int driverId in chosenDriversIds)
        {
            var driverLapTimes = await DatabaseCommunication.GetDriverLapTimes(driverId, chosenRaceId);
            lapTimesForDrivers.Add(driverLapTimes);
        }
        await LoadLapTimesChart();
    }

    // Load lap times chart
    private async Task LoadLapTimesChart()
    {
        List<Driver> driversToShow = drivers
            .Where(d => chosenDriversIds
            .Contains(d.driverId))
            .ToList();

        float[][] lapTimesToPass = ConvertLapTimesToFloatArray();
        string[] laps = new string[lapTimesToPass[0].Length];
        for (int i = 1; i <= laps.Length; i++)
        {
            laps[i - 1] = Convert.ToString(i);
        }
        var driverNames = driversToShow.Select(d => d.forename + " " + d.surname).ToArray();
        StateHasChanged();
        await JS.InvokeVoidAsync("loadLapTimesChart", driverNames, lapTimesToPass, laps);
    }

    // Get drivers for the whole season
    private async Task<List<Driver>> getDriversForWholeSeason(int season)
    {
        int lastRaceOfTheSeasonId = races[races.Count - 1].raceId;
        var driverStandingsForLastRace = await DatabaseCommunication.GetDriverStandingsForRace(lastRaceOfTheSeasonId);
        var driversToReturn = await DatabaseCommunication.GetDriversForRace(driverStandingsForLastRace);
        return driversToReturn;
    }

    // Get results for all races in the season
    private async Task getResultsForRaces()
    {
        try
        {
            resultsForRaces = new List<List<Result>>();


            foreach (var race in races)
            {
                var resultForRace = await DatabaseCommunication.GetResultsForRace(race.raceId);
                resultsForRaces.Add(resultForRace);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    // Update the URL based on selected parameters
    private async Task UpdateUrl()
    {
        if (chosenSeason != 0)
        {
            await JS.InvokeVoidAsync("updateUrl", $"/race-details/{chosenSeason}");

            if (chosenRaceId != null && chosenRaceId != 0)
            {
                await JS.InvokeVoidAsync("updateUrl", $"/race-details/{chosenSeason}/race-{chosenRaceId}/{chosenData}");
            }
            if (chosenDriversIds != null && chosenDriversIds.Any())
            {
                string driverIdsString = "drivers-" + string.Join(",", chosenDriversIds);
                await JS.InvokeVoidAsync("updateUrl", $"/race-details/{chosenSeason}/race-{chosenRaceId}/{chosenData}/{driverIdsString}");
            }
        }
    }

    // Load the whole season results chart
    private async Task LoadWholeSeasonResultsChart()
    {
        string[]? raceNames = races.Select(r => r.name).ToArray();

        List<int>? driverIds;
        if (chosenDriversIds == null || !chosenDriversIds.Any())
        {
            //get driver Ids for whole season
            driverIds = drivers.Select(d => d.driverId).ToList();
        }
        else
        {
            driverIds = chosenDriversIds;
        }

        var driversToShow = drivers.Where(d => driverIds.Contains(d.driverId)).ToList();
        float[][] pointsForRaces = GetPointsForRaces(driversToShow);

        var driverNames = driversToShow.Select(d => d.forename + " " + d.surname).ToArray();
        await JS.InvokeVoidAsync("loadWholeSeasonResultsChart", raceNames, driverNames, pointsForRaces);
    }

    // Get points for all races for the selected drivers
    private float[][] GetPointsForRaces(List<Driver> driversToShow)
    {
        float[][] pointsForRaces = new float[races.Count][];
        for (int i = 0; i < races.Count; i++)
        {
            int j = 0;
            pointsForRaces[i] = new float[driversToShow.Count];
            foreach (var driver in driversToShow)
            {
                try
                {
                    pointsForRaces[i][j] = resultsForRaces[i].Where(ds => ds.driverId == driver.driverId).Select(ds => ds.points).First();
                    j++;
                }
                catch
                {
                    pointsForRaces[i][j] = 0;
                    j++;
                }

            }
        }
        return pointsForRaces;
    }

    // Convert lap times to a float array for the chart
    private float[][] ConvertLapTimesToFloatArray()
    {
        int driverCount = lapTimesForDrivers.Count;
        float[][] lapTimesToPass = new float[driverCount][];

        for (int i = 0; i < driverCount; i++)
        {
            int lapCount = lapTimesForDrivers[i].Count;
            lapTimesToPass[i] = new float[lapCount];

            for (int j = 0; j < lapCount; j++)
            {
                lapTimesToPass[i][j] = lapTimesForDrivers[i][j].milliseconds / 1000f; // Convert to seconds
            }
        }

        return lapTimesToPass;
    }

    // Remove races with no results
    private async Task DeleteRacesWithNoResults()
    {
        List<Race> racesToRemove = new List<Race>();

        foreach (var race in races)
        {
            var resultsForRace = await DatabaseCommunication.GetResultsForRace(race.raceId);

            if (resultsForRace.Count == 0)
            {
                racesToRemove.Add(race);
            }
        }

        foreach (var raceToRemove in racesToRemove)
        {
            races.Remove(raceToRemove);
        }

        racesReady = true;
        StateHasChanged();
    }
}